{
  "nameShouldBeginWithLowercase": "The name {0} must start with lowercase",
  "nameShouldBeginWithUppercase": "The name {0} must start with uppercase",
  "nameShouldNotBeKeyword": "The name {0} is a keyword, you should pick another one",
  "shouldNotBeEmpty": "Should not make an empty definition.",
  "shouldUseConditionalExpression": "Bad usage of if! You must return the condition itself without using if.",
  "shouldPassValuesToAllAttributes": "{0} cannot be instantiated, you must pass values to the following attributes: {1}",
  "namedArgumentShouldExist": "Reference {0} not found in {1}",
  "linearizationShouldNotRepeatNamedArguments": "Reference {0} is initialized more than once during linearization",
  "namedArgumentShouldNotAppearMoreThanOnce": "Reference {0} is initialized more than once",
  "shouldInitializeAllAttributes": "You must provide initial value to the following references: {0}",
  "shouldImplementAllMethodsInHierarchy": "Methods in hierachy without super implementation: {0}",
  "shouldUseSelfAndNotSingletonReference": "Don't use the name within the object. Use 'self' instead.",
  "shouldNotReassignConst": "Cannot modify constants",
  "shouldNotHaveLoopInHierarchy": "Infinite loop in hierarchy",
  "shouldOnlyInheritFromMixin": "Mixin can only inherit from another mixin",
  "shouldNotDefineMoreThanOneSuperclass": "Bad Linearization: you cannot define multiple parent classes",
  "superclassShouldBeLastInLinearization": "Bad Linearization: superclass should be last in linearization",
  "shouldNotUseOverride": "Method does not override anything",
  "possiblyReturningBlock": "This method is returning a block, consider removing the '=' before curly braces.",
  "shouldUseOverrideKeyword": "Method should be marked as override, since it overrides a superclass method",
  "shouldMatchSuperclassReturnValue": "Override method {0} does not match the returned type from its superclass (should either return a value o act as a side-effect method)",
  "getterMethodShouldReturnAValue": "Getter should return a value",
  "methodShouldHaveDifferentSignature": "Duplicated method",
  "shouldNotDuplicateVariables": "There is already a variable with this name in the hierarchy",
  "shouldNotDuplicateFields": "There is already a field with this name in the hierarchy",
  "shouldNotDuplicateLocalVariables": "There is already a local variable with this name in the hierarchy",
  "shouldNotDuplicateGlobalDefinitions": "There is already a definition with this name in the hierarchy",
  "shouldNotDuplicateVariablesInLinearization": "There are attributes with the same name in the hierarchy: [{0}]",
  "shouldNotDuplicateEntities": "This name is already defined (imported from {0})",
  "shouldNotImportSameFile": "Cannot import same file",
  "shouldNotImportMoreThanOnce": "This file is already imported",
  "parameterShouldNotDuplicateExistingVariable": "Duplicated Name",
  "methodShouldExist": "Method does not exist or invalid number of arguments",
  "shouldImplementInheritedAbstractMethods": "You must implement all inherited abstract methods",
  "shouldHaveBody": "Method without body. You must implement it",
  "shouldNotUseVoidMethodAsValue": "Message send \"{0}\" produces no value (missing return in method?)",
  "shouldNotAssignValueInLoop": "Infinite loop in value assignment",
  "shouldInitializeGlobalReference": "Reference is never initialized",
  "shouldNotDefineUnusedVariables": "Unused variable",
  "shouldNotDefineGlobalMutableVariables": "Global 'var' references are not allowed. You should use 'const' instead.",
  "shouldDefineConstInsteadOfVar": "Variable should be const",
  "shouldNotCompareEqualityOfSingleton": "Comparing against named object is discouraged (missing polymorphism?)",
  "shouldUseBooleanValueInIfCondition": "Expecting a boolean",
  "shouldUseBooleanValueInLogicOperation": "Expecting a boolean",
  "shouldNotDefineUnnecesaryIf": "Unnecessary if always evaluates to true!",
  "codeShouldBeReachable": "Unreachable code",
  "shouldNotDefineUnnecessaryCondition": "Unnecessary condition",
  "shouldCatchUsingExceptionHierarchy": "Can only catch wollok.lang.Exception or a subclass of it",
  "catchShouldBeReachable": "Unreachable catch block",
  "shouldNotUseReservedWords": "{0} is a reserved name for a core element",
  "shouldNotDuplicatePackageName": "Duplicated package",
  "shouldMatchFileExtension": "The file extension doesn't allow this definition",
  "shouldHaveNonEmptyName": "Tests must have a non-empty description",
  "shouldHaveAssertInTest": "Tests must send at least one message to assert object",
  "overridingMethodShouldHaveABody": "Overriding method must have a body",
  "shouldNotDefineEmptyDescribe": "Describe should not be empty",
  "shouldNotMarkMoreThanOneOnlyTest": "You should mark a single test with the flag 'only' (the others will not be executed)"
}