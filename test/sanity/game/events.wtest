import wollok.game.*
import wollok.lang.io.*

object closureMock {
  var property calledCount = 0
  method called() = calledCount > 0
  method apply(args...) { calledCount += 1 }
}

object closureErrorMock {
  method apply(args...) { self.error('FAIL') }
}

class Visual {
  var property position = game.origin()
}

object visual inherits Visual { }

describe 'events' {


  override method initialize() {
    game.addVisual(visual)
  }


  test 'whenKeyPressedDo should add event handler' {
    const event = ["keypress", "KeyA"]
    keyboard.a().onPressDo(closureMock)
    assert.that(io.eventHandlersFor(event).contains(closureMock))
  }

  test 'whenKeyPressedDo should replace previous event handler' {
    const event = ["keypress", "KeyA"]
    keyboard.a().onPressDo(closureMock)
    keyboard.a().onPressDo(closureMock)
    assert.equals(1, io.eventHandlersFor(event).size())
  }
  
  test 'clear should clear event handlers' {
    const event = ["keypress"]
    game.whenKeyPressedDo(event, closureMock)
    game.clear()
    assert.notThat(io.eventHandlersFor(event).contains(closureMock))
  }
  

  test 'whenCollideDo never called' {
    game.whenCollideDo(visual, closureMock)
    io.flushEvents(0)
    assert.notThat(closureMock.called())
  }

  test 'whenCollideDo once called' {
    game.whenCollideDo(visual, closureMock)
    game.addVisual(new Visual())
    io.flushEvents(0)
    assert.that(closureMock.called())
  }

  test 'whenCollideDo many times called' {
    game.whenCollideDo(visual, closureMock)
    game.addVisual(new Visual())
    io.flushEvents(0)
    io.flushEvents(1)
    assert.equals(2, closureMock.calledCount()) 
  }


  test 'onCollideDo never called' {
    game.onCollideDo(visual, closureMock)
    io.flushEvents(0)
    assert.notThat(closureMock.called())
  }

  test 'onCollideDo once called' {
    game.onCollideDo(visual, closureMock)
    game.addVisual(new Visual())
    io.flushEvents(0)
    assert.that(closureMock.called())  
  }

  test 'onCollideDo only once called in same collision' {
    game.onCollideDo(visual, closureMock)
    game.addVisual(new Visual())
    io.flushEvents(0)
    io.flushEvents(1)
    assert.equals(1, closureMock.calledCount())  
  }

  test 'onCollideDo many times called in many collisions' {
    game.onCollideDo(visual, closureMock)
    const collider = new Visual()
    game.addVisual(collider)
    io.flushEvents(0) // First collision
    collider.position(game.at(1, 1))
    io.flushEvents(1) // No collision, different positions
    collider.position(game.origin())
    io.flushEvents(2) // Second collision
    assert.equals(2, closureMock.calledCount())  
  }

  test 'onCollideDo never called when visual is not in the game' {
    game.onCollideDo(visual, closureMock)
    game.addVisual(new Visual())
    game.removeVisual(visual)
    io.flushEvents(0)
    assert.notThat(closureMock.called())
  }


  test 'onTick never called' {
    game.onTick(1000, "", closureMock)
    io.flushEvents(999)
    assert.notThat(closureMock.called())
  }

  test 'onTick once called' {
    game.onTick(1000, "", closureMock)
    io.flushEvents(1000)
    assert.that(closureMock.called())
  }

  test 'onTick many times called' {
    game.onTick(1000, "", closureMock)
    io.flushEvents(1000)
    io.flushEvents(2000)
    assert.equals(2, closureMock.calledCount())
  }

  test 'onTick gets executed as many times as expected' {
    game.onTick(100, "", closureMock)
    io.flushEvents(200)
    assert.equals(1, closureMock.calledCount())
    io.flushEvents(201)
    assert.equals(2, closureMock.calledCount())
    io.flushEvents(202)
    assert.equals(2, closureMock.calledCount())
  }

  test 'removeTickEvent' {
    game.onTick(1000, "event", closureMock)
    game.removeTickEvent("event")
    io.flushEvents(1000)
    assert.notThat(closureMock.called())
  }

  test 'Tick class instantiation itself does not start a tickEvent' {
    const newTickObject = new Tick(interval = 1000, action = closureMock)
    assert.notThat(newTickObject.isRunning())
  }

  test 'tickEvent executes action when started if inmediate set to true' {
    const newTickObject = new Tick(interval = 1000, inmediate = true, action = closureMock)
    newTickObject.start()
    assert.that(closureMock.called())
  }

  test 'tickEvent does not execute action when started if not specified' {
    const newTickObject = new Tick(interval = 1000, action = closureMock)
    newTickObject.start()
    assert.notThat(closureMock.called())
  }

  test 'Tick.isRunning responds to the correct tickEvent' {
    const newTickObject = new Tick(interval = 1000, action = closureMock)
    const anotherTickObject = new Tick(interval = 1000, action = closureMock)
    anotherTickObject.start()
    assert.that(anotherTickObject.isRunning())
    assert.notThat(newTickObject.isRunning())
    newTickObject.start()
    assert.that(newTickObject.isRunning())
  }
  
  test 'Tick class instance can start a tickEvent correctly' {
    const newTickObject = new Tick(interval = 1000, action = closureMock)
    newTickObject.start()
    assert.that(newTickObject.isRunning())
  }
  
  test 'Tick class instance can stop a tickEvent correctly' {
    const newTickObject = new Tick(interval = 1000, action = closureMock)
    newTickObject.start()
    assert.that(newTickObject.isRunning())
    newTickObject.stop()
    assert.notThat(newTickObject.isRunning())
  }

  test "update interval of an existent tick" {
    const newTickObject = new Tick(interval = 1000, action = closureMock)
    assert.equals(0, closureMock.calledCount())  // hasn't counted yet
    newTickObject.start()            // starts tick event with an interval of 1sec
    io.flushEvents(1000)
    assert.equals(1, closureMock.calledCount())  // 1 sec after, counter increments
    io.flushEvents(2000)
    assert.equals(2, closureMock.calledCount())  // 1 sec after, it increments again
    io.flushEvents(2500)
    assert.equals(2, closureMock.calledCount())  // despite being 0.5sec later, counter doesn't increment
    newTickObject.interval(500)      // restarts the tick with an interval of 0.5sec
    assert.equals(2, closureMock.calledCount())  // counter doesn't change since currentTime's still the same
    io.flushEvents(3000)          
    assert.equals(3, closureMock.calledCount())  // 0.5sec later, it increments again  
    io.flushEvents(3500)          
    assert.equals(4, closureMock.calledCount())  // ""  ""  ""  "" , proving interval got updated
  }

  test "a running tick throws exception if started again" {
    const newTickObject = new Tick(interval = 1000, action = closureMock)
    newTickObject.start()
    assert.that(newTickObject.isRunning())
    assert.throwsException({=> newTickObject.start()})
  }

  test "a non running tick does not throw exception if stopped again" {
    const newTickObject = new Tick(interval = 1000, action = closureMock)
    assert.notThat(newTickObject.isRunning())
    assert.doesNotThrowException({=> newTickObject.stop()})
  }

  test "tick method of game object instantiates a functional Tick object" {
    const newTickObject = game.tick(1000, closureMock, false)
    assert.doesNotThrowException({=>newTickObject.start()})
    assert.that(newTickObject.isRunning())
    assert.doesNotThrowException({=>newTickObject.interval(800)})
    assert.doesNotThrowException({=>newTickObject.stop()})
  }

  test 'schedule once called' {
    game.schedule(1000, closureMock)
    io.flushEvents(1000)
    assert.that(closureMock.called())
  }

  test 'schedule only once called' {
    game.schedule(1000, closureMock)
    io.flushEvents(1000)
    io.flushEvents(2000)
    assert.equals(1, closureMock.calledCount())
  }

  test 'schedule on 0 ms should not throws exception' {
    io.exceptionHandler(closureErrorMock)
    game.schedule(0, closureMock)
    io.flushEvents(0)
  }
  
}
