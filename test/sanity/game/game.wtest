import wollok.game.*

/**
  * Scenario: 
  * - a visual component as a named object
  * - a generic class Visual
  */
const origin = new Position(x = 0, y = 0)
object myVisual {
  var property position = origin
 }
class Visual { 
  var property position = origin
}

const pepita = object { method position() = game.at(1,3) } 

/**
  * Tests
  */
describe "Game" {

  method initialize() {
    game.clear()
  }

  test "can instance new position" {
    assert.equals(new Position(x = 1, y = 2), game.at(1,2))
  }

  test "origin should return origin coordinate position" {
    assert.equals(new Position(x = 0, y = 0), game.origin())
  }

  test "center should return centered coordinate position" {
    game.width(2)
    game.height(5)
    assert.equals(new Position(x = 1, y = 2), game.center())
  }

  test "visual colliders" {
    game.addVisual(myVisual)
    2.times { i => game.addVisual(new Visual()) }
    game.addVisual(new Visual(position = new Position(x = 0, y = 1)))
    assert.equals(2, game.colliders(myVisual).size())
  }

  test "unique collider" {
    game.addVisual(myVisual)
    const otherVisual = new Visual()
    game.addVisual(otherVisual)
    assert.equals(otherVisual, game.uniqueCollider(myVisual))
  }

  test "adding same visual twice should fail" {
    game.addVisual(myVisual)
    assert.throwsException { game.addVisual(myVisual) }
  }

  test "addVisual using null should fail" {
    assert.throwsException { => game.addVisual(null) }
  }
  
  test "removeVisual should remove a visual from the board" {
  	game.addVisual(myVisual)
  	game.removeVisual(myVisual)
  	assert.that(game.allVisuals().isEmpty())
  }
  
  test "removing a visual that is not on the board should not fail" {
  	assert.doesNotThrowException({game.removeVisual(myVisual)})
  }

  test "colliders using null should fail" {
    assert.throwsException { => game.colliders(null) }
  }

  test "onTick using null should fail" {
    assert.throwsException { => game.onTick(null, null, null) }
  }

  test "whenKeyPressedDo using null should fail" {
    assert.throwsException { => game.whenKeyPressedDo(null, null) }
  }

  test "once added a visual should be findable in the gameboard" {
    game.addVisual(myVisual)
    assert.that(game.hasVisual(myVisual))
  }

  test "looking for a non-added visual should return false" {
    const otherVisual = object {
      method position() = game.at(2, 2)
    }
    game.addVisual(myVisual)
    assert.notThat(game.hasVisual(otherVisual))
  }

  test "initially there are no elements in the gameboard" {
    assert.equals(0, game.allVisuals().size())
  }

  test "when a visual is added there is 1 element in the gameboard" {
    game.addVisual(myVisual)
    assert.equals(1, game.allVisuals().size())
    assert.equals(myVisual, game.allVisuals().get(0))
  }

  test "adding some visuals and getting them in a sequence" {
    const visual2 = new Visual()
    const visual3 = new Visual()
    game.addVisual(myVisual)
    game.addVisual(visual2)
    game.addVisual(visual3)
    assert.equals(3, game.allVisuals().size())
    assert.equals([myVisual, visual2, visual3].asSet(), game.allVisuals().asSet())
  }

  test "cell size fails when set to 0" {
    assert.throwsException { => game.cellSize(0) }
  }

  test "cell size fails when set to negative number" {
    assert.throwsException { => game.cellSize(-10) }
  }

  test "cell size correctly set" {
    assert.doesNotThrowException { game.cellSize(10) }
  }

  test "game should initialize with default values"{
    assert.equals("Wollok Game", game.title())
    assert.equals(5, game.width())
    assert.equals(5, game.height())
  }

  test "A floating point position contains an object in an integer position" {
    game.addVisual(pepita)
    const floatingPosition = game.at(1.3, 3.2)
    assert.that(game.getObjectsIn(floatingPosition).contains(pepita))
  }

  test "A floating point position does not contain an object in an integer position" {
    game.addVisual(pepita)
    const floatingPosition = game.at(1.7, 3.8)
    assert.that(game.getObjectsIn(floatingPosition).isEmpty())
  }

  test "Two positions are on the same cell" {
    assert.that(game.onSameCell(game.at(1.3, 2.3), game.at(1,2)))
  }

  test "Two positions are not on the same cell" {
    assert.notThat(game.onSameCell(game.at(1.5, 2.6), game.at(1.3, 2.3)))
  }
}
