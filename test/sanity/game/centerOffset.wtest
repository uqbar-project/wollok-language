import wollok.game.*
import wollok.lang.io.*

describe "CenterOffset position" {
  /**
    * Scenario: 
    * - A CenterOffset with 0 xOffset and 0 yOffset.
    */
  var centerOffset
  
  override method initialize() {
    game.width(2)
    game.height(5)
    centerOffset = new CenterOffset()
  }

  test "x is 1 and y is 2 if the board width is 2 and height is 5 and offsets for centerOffset offsetted at 0,0 are 0 while games is idle" {
    assert.notThat(game.running())
    centerOffset = centerOffset.centerOffsetted(0,0)
        
    assert.equals(1, centerOffset.x())
    assert.equals(2, centerOffset.y())
  }

  test "x is 1 and y is 2 if the board width is 2 and height is 5 when the game is running, even after changing game width or height" {
    game.running(true)
    const position = centerOffset.centerOffsetted(0,0)
    
    assert.equals(1, position.x())
    assert.equals(2, position.y())

    game.width(10)
    game.height(10)

    assert.equals(1, position.x())
    assert.equals(2, position.y())
  }

  test "x is 2 and y is 3 if the board width is 2 and height is 5 and offsets for centerOffset offsetted at (1,1) are 1 while games is idle" {
    assert.notThat(game.running())
    centerOffset = centerOffset.centerOffsetted(1,1)
        
    assert.equals(2, centerOffset.x())
    assert.equals(3, centerOffset.y())
  }

  test "x is 2 and y is 3 if the board width is 2 and height is 5 when the game is running, even after changing game width or height" {
    game.running(true)
    const position = centerOffset.centerOffsetted(1,1)
    
    assert.equals(2, position.x())
    assert.equals(3, position.y())

    game.width(10)
    game.height(10)

    assert.equals(2, position.x())
    assert.equals(3, position.y())
  }

  test "x is 1 and y is 2 if the board width is 2 and height is 5 and default offsets for CenterOffset are 0" {
    assert.equals(1, centerOffset.x())
    assert.equals(2, centerOffset.y())
  }

  test "CenterOffsets are not rounded at instantiation" {
    centerOffset = centerOffset.right(0.3)
    centerOffset = centerOffset.up(0.4)

    assert.equals(1.3, centerOffset.x())
    assert.equals(2.4, centerOffset.y())
  }
  
  test "move right should create a new position while game is running" {
    game.running(true)
    const right = centerOffset.right(2)
    game.width(10)
  	assert.equals(new Position(x = 3, y = 2), right)  	
  }
  
  test "move left should create a new position while game is running" {
  	game.running(true)
    const left = centerOffset.left(1)
    game.width(10)
  	assert.equals(new Position(x = 0, y = 2), left)   	
  }
  
  test "move up should create a new position while game is running" {
  	game.running(true)
    const up = centerOffset.up(2)
    game.height(10)
  	assert.equals(new Position(x = 1, y = 4), up)  
  }
  
  test "move down should create a new position while game is running" {
  	game.running(true)
    const down = centerOffset.down(2)
    game.height(10)
  	assert.equals(new Position(x = 1, y = 0), down)  	
  }

  test "move right should create a new center offset while game is idle" {
    assert.notThat(game.running())
    centerOffset = centerOffset.right(2)
    assert.equals(new Position(x = 3, y = 2), centerOffset)  	
    game.width(10)
    assert.equals(new Position(x = 7, y = 2), centerOffset)  	
  }
  
  test "move left should create a new center offset while game is idle" {
    assert.notThat(game.running())
  	centerOffset = centerOffset.left(1)
    assert.equals(new Position(x = 0, y = 2), centerOffset)  	
    game.width(10)
    assert.equals(new Position(x = 4, y = 2), centerOffset)  		
  }
  
  test "move up should create a new center offset while game is idle" {
    assert.notThat(game.running())
  	centerOffset = centerOffset.up(2)
    assert.equals(new Position(x = 1, y = 4), centerOffset)  	
    game.height(10)
    assert.equals(new Position(x = 1, y = 7), centerOffset)  	 	
  }
  
  test "move down should create a new center offset while game is idle" {
    assert.notThat(game.running())
  	centerOffset = centerOffset.down(2)
    assert.equals(new Position(x = 1, y = 0), centerOffset)  	
    
    game.height(10)
    assert.equals(new Position(x = 1, y = 3), centerOffset)  	 	
  }
  
  test "clone should create a new center offset while game is idle" {
    assert.notThat(game.running())
  	const clonedCenter = centerOffset.clone()
    
    assert.equals(new Position(x = 1, y = 2), clonedCenter)  	
    
    game.width(6)
    game.height(8)
    assert.equals(new Position(x = 3, y = 4), clonedCenter)  	
  }

  test "clone should create a new position while game is running" {
  	game.running(true)
    const clonedCenter = centerOffset.clone()
    
    assert.equals(new Position(x = 1, y = 2), clonedCenter)  	
    
    game.width(6)
    game.height(8)
    assert.equals(new Position(x = 1, y = 2), clonedCenter)  	
  }

  test "center offset round should be rounded as a new CenterOffset while game is idle" {
    centerOffset = centerOffset.right(0.6)
    centerOffset = centerOffset.up(0.3)

  	assert.equals(new Position(x = 2, y = 2), centerOffset.round())
    
    game.width(10)
    game.height(10)
    assert.equals(new Position(x = 6, y = 5), centerOffset.round())
  }

  test "center offset round should create a rounded position when game is running" {
    centerOffset = centerOffset.right(0.3)
    centerOffset = centerOffset.up(0.6)
    game.running(true)
  	
    const position = centerOffset.round()
    game.width(10)
    game.height(10)
    
  	assert.equals(new Position(x = 1, y = 3), position)
  }

  test "center offset should create a position when createPosition is called" {
    const position = centerOffset.createPosition(0, 0)
  	game.height(4)
    game.width(10)

    assert.equals(new Position(x = 0, y = 0), position)
  }
}