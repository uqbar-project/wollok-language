import wollok.game.*

/**
  * Scenario: 
  * - A CenterOffset with 0 xOffset and 0 yOffset.
  */
const centerOffset = new CenterOffset()

/**
  * Tests
  */
describe "position" {

  override method initialize() {
    game.width(2)
    game.height(5)
  }

  test "x is 1 and y is 2 if the board width is 2 and height is 5 and default offsets for CenterOffset are 0" {
    assert.equals(1, centerOffset.x())
    assert.equals(2, centerOffset.y())
  }

  test "CenterOffsets are not rounded at instantiation" {
    const x = 1.4
    const y = 2.3
    
    centerOffset.up(0.4)
    centerOffset.right(0.3)
    
    assert.equals(x, centerOffset.x())
    assert.equals(y, centerOffset.y())
  }
  
  //Keep going from here!!! test variants game.running and idle.
  test "move right should create a new position while game is running" {
    game.running(true)
    const right = centerOffset.right(2)
    game.width(10)
  	assert.equals(new Position(x = 4, y = 2), right)  	
  }
  
  test "move left should create a new position while game is running" {
  	game.running(true)
    const left = centerOffset.left(2)
    game.width(10)
  	assert.equals(new Position(x = 0, y = 2), left)   	
  }
  
  test "move up should create a new position while game is running" {
  	game.running(true)
    const up = centerOffset.up(2)
    game.height(10)
  	assert.equals(new Position(x = 2, y = 4), up)  
  }
  
  test "move down should create a new position while game is running" {
  	game.running(true)
    const down = centerOffset.down(2)
    game.height(10)
  	assert.equals(new Position(x = 2, y = 0), down)  	
  }

  test "move right should create a new center offset while game is idle" {
    const center2Right = centerOffset.right(2)
    assert.equals(new Position(x = 4, y = 2), center2Right)  	
    game.width(10)
    assert.equals(new Position(x = 4, y = 2), center2Right)  	
  }
  
  test "move left should create a new center offset while game is idle" {
  	const center2Left = centerOffset.left(2)
    assert.equals(new Position(x = 0, y = 2), center2Left)  	
    game.width(10)
    assert.equals(new Position(x = 0, y = 2), center2Left)  		
  }
  
  test "move up should create a new center offset while game is idle" {
  	const center2Up = centerOffset.up(2)
    assert.equals(new Position(x = 2, y = 4), center2Up)  	
    game.width(10)
    assert.equals(new Position(x = 2, y = 4), center2Up)  	 	
  }
  
  test "move down should create a new center offset while game is idle" {
  	const center2Down = centerOffset.down(2)
    assert.equals(new Position(x = 2, y = 0), center2Down)  	
    
    game.width(10)
    assert.equals(new Position(x = 2, y = 0), center2Down)  	 	
  }
  
  test "clone should create a new center offset while game is idle" {
  	const clonedCenter = centerOffset.clone()
    
    assert.equals(new Position(x = 1, y = 2), clonedCenter)  	
    
    game.width(6)
    game.height(8)
    assert.equals(new Position(x = 3, y = 4), clonedCenter)  	
  }

  test "clone should create a new position while game is running" {
  	game.running(true)
    const clonedCenter = centerOffset.clone()
    
    assert.equals(new Position(x = 1, y = 2), clonedCenter)  	
    
    game.width(6)
    game.height(8)
    assert.equals(new Position(x = 1, y = 2), clonedCenter)  	
  }

  test "center offset should be rounded as a new CenterOffset while game is idle" {
  	var unroundedCenterOffset = centerOffset.right(0.6)
    unroundedCenterOffset = unroundedCenterOffset.up(0.3)

  	assert.equals(new Position(x = 1, y = 2), unroundedCenterOffset.round())
  }

  test "center offset should create a rounded position" {
    game.running(true)
  	var unroundedPosition = centerOffset.right(0.6)
    game.width(10)
    game.height(10)
    unroundedPosition = unroundedCenterOffset.up(0.3)
    
  	assert.equals(new Position(x = 1, y = 2), unroundedPosition.round())
  }

  test "center offset should create a position when createPosition is called" {
    var position = centerOffset.createPosition(0, 0)
  	game.height(4)
    game.width(10)

    assert.equals(new Position(x = 0, y = 0), position)
  }
  
}