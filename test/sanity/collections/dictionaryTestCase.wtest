/**
  * Scenario 1: a custom empty class
  */
class Golondrina {}

object dictionaryFactory {

  method mapaTelefonos() {
    const mapaTelefonos = new Dictionary()
    mapaTelefonos.put("choli", "2142-5980")
    mapaTelefonos.put("mario", "5302-6617")
    return mapaTelefonos
  }

}

/**
  * Tests
  */
describe "dictionary test case" {

  test "get value" {
    assert.equals("2142-5980", dictionaryFactory.mapaTelefonos().get("choli"))
  }

  test "get value not found" {
    assert.throwsException({ => dictionaryFactory.mapaTelefonos().get("betty")})
  }

  test "get or else for value not found" {
    var notFound = false
    dictionaryFactory.mapaTelefonos().getOrElse("betty", { => notFound = true})
    assert.that(notFound)
  }

  test "size" {
    const mapaTelefonos = dictionaryFactory.mapaTelefonos()
    assert.equals(2, mapaTelefonos.size())
    mapaTelefonos.put("rita", "3923-0029")
    assert.equals(3, mapaTelefonos.size())
  }

  test "empty dictionary is empty" {
    assert.that((new Dictionary()).isEmpty())
  }

  test "dictionary with elements is not empty" {
    assert.notThat(dictionaryFactory.mapaTelefonos().isEmpty())
  }

  test "containsKey" {
    const mapaTelefonos = dictionaryFactory.mapaTelefonos()
    assert.that(mapaTelefonos.containsKey("choli"))
    assert.notThat(mapaTelefonos.containsKey("cuca"))
  }

  test "containsValues" {
    const mapaTelefonos = dictionaryFactory.mapaTelefonos()
    assert.that(mapaTelefonos.containsValue("2142-5980"))
    assert.notThat(mapaTelefonos.containsValue("2142-5280"))
  }

  test "remove" {
    const mapaTelefonos = dictionaryFactory.mapaTelefonos()
    assert.that(mapaTelefonos.containsKey("choli"))
    mapaTelefonos.remove("choli")
    assert.notThat(mapaTelefonos.containsKey("choli"))
  }

  test "remove non existent key" {
    const mapaTelefonos = dictionaryFactory.mapaTelefonos()
    mapaTelefonos.remove("pepe")
    assert.equals(2, mapaTelefonos.size())
  }

  test "keys" {
    const mapa = new Dictionary()
    mapa.put(4, "2142-5980")
    mapa.put(9, "5302-6617")
    assert.equals(mapa.keys(), [4, 9])
  }

  test "values" {
    const mapa = new Dictionary()
    mapa.put("2142-5980", 4)
    mapa.put("5302-6617", 9)
    assert.equals(mapa.values(), [4, 9])
  }

  test "forEach" {
    var result = 0
    dictionaryFactory.mapaTelefonos().forEach({ k , v => result += k.size() + v.size()})
    assert.equals(28, result)
  }

  test "clear empties a dictionary" {
    const mapaTelefonos = new Dictionary()
    mapaTelefonos.put("choli", "2142-5980")
    mapaTelefonos.clear()
    assert.that(mapaTelefonos.isEmpty())
  }

  test "toString" {
    const mapaTelefonos = new Dictionary()
    assert.equals("a Dictionary []", mapaTelefonos.toString())
    mapaTelefonos.put("choli", "2142-5980")
    assert.equals("a Dictionary [\"choli\" -> \"2142-5980\"]", mapaTelefonos.toString())
    mapaTelefonos.put(2, 33)
    assert.that(mapaTelefonos.toString().contains("\"choli\" -> \"2142-5980\""))
    assert.that(mapaTelefonos.toString().contains(", "))
    assert.that(mapaTelefonos.toString().contains("2 -> 33"))
  }

  test "put null key should throw an exception" {
    assert.throwsException({ new Dictionary().put(null, 2184)})
  }

  test "put null value should throw an exception" {
    assert.throwsException({ new Dictionary().put(2145, null)})
  }

  test "adding several swallows in a map" {
    var pepa = new Golondrina()
    var s = new Dictionary()
    s.put(pepa, 0)
    (1 .. 50).forEach({ i => s.put(new Golondrina(), i)}) // all objects are not == to pepa
    assert.notEquals(pepa, new Golondrina())
    assert.equals(51, s.size())
    assert.equals(0, s.get(pepa))
  }

}
