/**
  * Scenario: 
  * - a named object with a method using an if expression
  * - a named object with a method (= syntax) using an if expression
  * - a named object with a method using an if expression with a single return
  */
object numeroLoco {
  method calculoLoco(n) {
    if (n) {
      return 0
    }
    return n
  }
}

object oddOrEven {
  method calculate(number) = if (number % 2 == 0) "even" else "odd"
}

object oddOrEvenWithReturn {
  method calculate(number) {
    return if (number % 2 == 0) "even" else "odd"
  }
}

/**
  * Tests
  */
describe "If expressions" {

  test "if without '{}'" {
    const o = object {
      var t

      method editT() {
        t = 1
      }

      method t() = t

      method m(a){
        if (a)
          self.editT()
      }
    }

    o.m(true)
    assert.equals(1, o.t())
  }

  test "if without '{}' with else" {
    const o = object {
      method m(a) {
        if (a)
          return 1
        else
          return 0
      }
    }
    assert.equals(1, o.m(true))
    assert.equals(0, o.m(false))
  }

  test "if with '{}' with else" {
    const o = object {
      method m(a) {
        if (a) {
          return 1
        }  else {
          return 0
        }
      }
    }
    assert.equals(1, o.m(true))
    assert.equals(0, o.m(false))
  }

  test "if with 'then' with a multi-sentence curly-braced body" {
    const o = object {
      var p
      method m(a){
        if (a) {
          p = 1
          return 1
        }  else {
          return 0
        }
      }
      method p() = p
    }
    assert.that(o.m(true) == 1 && o.p() == 1)
    assert.equals(0, o.m(false))
  }

  test "'if' inside other 'if' that has an else" {
    const o = object {
      method m(a,c) {
        if (a) {
          if (c)
            return 1
          else
            return 3
        }
        else {
          return 0
        }
      }
    }
    assert.equals(1, o.m(true, true))
    assert.equals(3, o.m(true, false))
    assert.equals(0, o.m(false, true))
  }

  test "if inline - true part" {
    assert.equals(oddOrEven.calculate(2), "even")
  }

  test "if inline - false part" {
    assert.equals(oddOrEven.calculate(3), "odd")
  }

  test "if inline with return - true part" {
    assert.equals(oddOrEvenWithReturn.calculate(2), "even")
  }

  test "if inline with return - false part" {
    assert.equals(oddOrEvenWithReturn.calculate(3), "odd")
  }

  test "if condition as a number should fail" {
    assert.throwsException { => numeroLoco.calculoLoco(3) }
  }

}

describe "if should be usable as message argument" {
  const adder = object {
    method add(a, b, c) = a + b + c
  }

  test "with multiline then clause" {
    assert.equals(6, adder.add(1, if(true) { 0 ; 2 } else 0, 3))
  }

  test "with multiline else clause" {
    assert.equals(6, adder.add(1, if(false) 0 else { 0 ; 2 }, 3))
  }
}