/**
  * Scenario: a named object without attribute initialization
  * and some other classes and named objects
  */
class Golondrina { var energia = 0 }

object pepita {
  var energia
  method energia() { return energia }

  method volar(metros) { energia -= metros * 10 }
  method comer(comida) { 
    energia += comida.energia()
  }
}

object alpiste {
  method energia() = 2
}

/**
  * Tests
  */
describe "Null Test Case" {

  test "message sent to null" {
    const a = null
    assert.throwsException({ a.sayHi() })
  }

  test "number operators sent to null" {
    assert.throwsException({ null + 3 })
    assert.throwsException({ null - 3 })
    assert.throwsException({ null * 3 })
    assert.throwsException({ null / 3 })
  }

  test "boolean operators sent to null" {
    assert.throwsException({ null || null })
    assert.throwsException({ null && null })
  }

  test "== operator sent to null" {
    var valorNulo
    // Just to check if the null can be tested against a WKO
    // Cannot be performed directly because you should not use comparison over WKO
    const anotherAssert = assert
    assert.notThat(null == 8)
    assert.notThat(null == "pepe")
    assert.notThat(null == 3.0)
    assert.notThat(null == 1..2)
    assert.notThat(null == [1,2,3])
    assert.notThat(null == #{1,2,3})
    assert.notThat(null == anotherAssert)
    assert.notThat(null == new Golondrina())
    assert.notThat(valorNulo == 8)
    assert.that(valorNulo == null)
    assert.notThat(valorNulo != null)
  }
  
  test "equalEqualOperatorWithANullArgument" {
      assert.notThat(8 == null)
      assert.notThat("pepe" == null)
      assert.notThat(false == null)
      assert.notThat(2.0 == null)
      assert.notThat(1..2 == null)
      assert.notThat([1,2,3] == null)
      assert.notThat(assert == null)
      assert.notThat(new Golondrina() == null)
  }

  test "== operator with a null argument" {
    assert.notThat(8 == null)
    assert.notThat("pepe" == null)
    assert.notThat(false == null)
    assert.notThat(2.0 == null)
    assert.notThat(1..2 == null)
    assert.notThat([1,2,3] == null)
    assert.notThat(#{1,2,3} == null)
    assert.notThat(assert == null)
    assert.notThat(new Golondrina() == null)
  }

  test "if in a null expression" {
    var expresionNula
    try {
      if (expresionNula) {
        assert.fail("Null Expression did not fail!")
      }
    } catch e: Exception {
      /*Ok*/
      assert.that(true)
    }
  }

  test "null in an message - 1" {
    assert.throwsException({ pepita.comer(alpiste)})
  }

  test "null in a message - 2" {
    assert.throwsException({ pepita.volar(10)})
  }

  test "check null by identity" {
    var a = null
    assert.that(a == null)
    assert.notThat(a != null)
    assert.that(a === null)
    assert.notThat(a !== null)
    assert.notThat(1 === null)
    assert.that(1 !== null)
    assert.notThat(1 === 2)
    assert.that(1 !== 2)
  }

}
