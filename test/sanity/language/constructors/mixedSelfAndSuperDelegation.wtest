/**
  * Scenario: a class in a hierarchy having a constructor that uses self and super delegation
  */
class A {
  var x
  var y

  constructor(point) = self(point.x(), point.y()) {}
  constructor(_x,_y) { x = _x ; y = _y }

  method x() { return x }
  method y() { return y }
}

class B inherits A { 
  constructor(p) = super(p + 10) {}
}

class C inherits B {
  constructor(_x, _y) = self(new Point(_x, _y)) {}
  constructor(p) = super(p) {}
}

class Point {
  var x
  var y

  constructor(_x,_y) { x = _x ; y = _y }

  method +(delta) {
    x += delta
    y += delta
    return self
  }

  method x() { return x }
  method y() { return y }
}

/**
  * Tests
  */
test "mixed self and super delegation" {
  const o = new C(10, 20)
  assert.equals(20, o.x())
  assert.equals(30, o.y())
}
