/**
 * Tests for Wollok numbers => extensions methods
 */
describe "Number operators" {

  test "Max" {
    assert.equals(1.max(2), 2)
    assert.equals((1.0).max(2), 2)
    assert.equals(1.max(2.0), 2.0)
    assert.equals((1.0).max(2.0), 2.0)
    assert.equals(2.max(1), 2)
    assert.equals((2.0).max(1), 2.0)
    assert.equals(2.max(1.0), 2)
    assert.equals((2.0).max(1.0), 2.0)
  }

  test "Max failing parameter" {
    assert.throwsException({ 4.max(new Date(day=21, month=12, year=2017)) })
  }

  test "Max using null" {
    assert.throwsException({ 4.max(null) })
  }

  test "Min" {
    assert.equals(1.min(2), 1)
    assert.equals((1.0).min(2), 1.0)
    assert.equals(1.min(2.0), 1)
    assert.equals((1.0).min(2.0), 1.0)
    assert.equals(2.min(1), 1)
    assert.equals((2.0).min(1), 1)
    assert.equals(2.min(1.0), 1.0)
    assert.equals((2.0).min(1.0), 1.0)
  }

  test "Min failing parameter" {
    assert.throwsException({ 4.min(new Date(day=21, month=12, year=2017)) })
  }

  test "Min using null" {
    assert.throwsException({ 4.min(null) })
  }

  test "Abs" {
    assert.equals(1.abs(), 1)
    assert.equals((1.0).abs(), 1.0)
    assert.equals(0, 0.abs())
    assert.equals(0, 0.0.abs())
    assert.equals(60.664, (-60.664).abs())
    assert.equals(60.664, (60.664).abs())
  }

  test "Absolute value of a negative integer" {
    assert.equals(3, (-3).abs())
    assert.equals((-1.0).abs(), 1.0)
  }

  test "Limit Between" {
    assert.equals(1.limitBetween(2,3), 2)
    assert.equals((1.0).limitBetween(2,3), 2)
    assert.equals(1.limitBetween(2.0,3), 2.0)
    assert.equals((1.0).limitBetween(2.0,3), 2.0)

    assert.equals(4.limitBetween(2,3), 3)
    assert.equals((4.0).limitBetween(2,3), 3)
    assert.equals(4.limitBetween(2,3.0), 3.0)
    assert.equals((4.0).limitBetween(2,3.0), 3.0)

    assert.equals(4.limitBetween(2,10), 4)
    assert.equals((4.0).limitBetween(2,10), 4.0)

    assert.equals(1.limitBetween(3,2), 2)
    assert.equals((1.0).limitBetween(3,2), 2)
    assert.equals(1.limitBetween(3,2.0), 2.0)
    assert.equals((1.0).limitBetween(3,2.0), 2.0)

    assert.equals(4.limitBetween(3,2), 3)
    assert.equals((4.0).limitBetween(3,2), 3)
    assert.equals(4.limitBetween(3.0,2), 3.0)
    assert.equals((4.0).limitBetween(3.0,2), 3.0)

    assert.equals(4.limitBetween(10,2), 4)
    assert.equals((4.0).limitBetween(10,2), 4.0)
  }

  test "Integers as result value of native" {
    assert.equals(4, "hola".length())
  }

  test "Integers from native objects" {
    assert.equals(3, "hola".length() - 1)
  }

  test "Times" {
    var x = 0
    6.times { i => x += 1 }
    assert.equals(6, x)
  }

  test "Times fail" {
    assert.throwsException({ 4.times("a") } )
  }

  test "Times using null" {
    assert.throwsException({ 4.times(null) } )
  }

  test "Integers between true" {
    assert.that(3.between(1, 5))
  }

  test "Integers between false" {
    assert.notThat(3.between(5, 9))
  }

  test "Between using null" {
    assert.throwsException({ 2.between(1, null) } )
  }

  test "Between fail" {
    assert.throwsException({ 2.between("a", 2)}) 
  }

  test "Square root" {
    assert.equals(3, 9.squareRoot())
  }

  test "Square" {
    assert.equals(9, 3.square())
  }

  test "Remainder" {
    const remainder = 17.rem(7)
    const remainder2 = 12.rem(6)
    assert.equals(3, remainder)
    assert.equals(0, remainder2)
    assert.equals(0.11521, 1.1152112.rem(1.0000002))
  }

  test "Remainder using null" {
    assert.throwsException({ 2.rem(null) } )
  }

  test "Remainder fail" {
    assert.throwsException({ 2.rem("a") } )
  }

  test "Even" {
    assert.notThat(3.even())
    assert.that(260.even())
  }

  test "Odd" {
    assert.that(3.odd())
    assert.notThat(260.odd())
  }

  test "Gcd" {
    assert.equals(5.gcd(25), 5)
    assert.equals(25.gcd(20), 5)
    assert.equals(2.gcd(3), 1)
  }

  test "Gcd using null" {
    assert.throwsException({ 4.gcd(null) })
  }

  test "Gcd for invalid arguments" {
    assert.throwsException({ 4.gcd(new Date(day=1, month=1, year=2018)) })
  }

  test "Lcm" {
    const lcm1 = 5.lcm(25)
    const lcm2 = 7.lcm(8)
    const lcm3 = 10.lcm(15)
    assert.equals(25, lcm1)
    assert.equals(56, lcm2)
    assert.equals(30, lcm3)
  }

  test "Lcm using null" {
    assert.throwsException({ 4.lcm(null) })
  }

  test "Lcm for invalid arguments" {
    assert.throwsException({ 4.lcm(new Date(day=1, month=1, year=2018)) })
  }

  test "Integer digits" {
    assert.equals(4, 1024.digits())
    assert.equals(3, (-220).digits())
  }

  test "Decimal digits" {
    assert.equals(4, 10.24.digits())
    assert.equals(4, (-10.24).digits())
  }

  test "isPrime" {
    assert.notThat(1.isPrime())
    assert.that(2.isPrime())
    assert.that(3.isPrime())
    assert.notThat(4.isPrime())
    assert.that(5.isPrime())
    assert.notThat(88.isPrime())
    assert.that(17.isPrime())
  }

  test "RandomUpTo for integers" {
    const random1 = 3.randomUpTo(8)
    assert.that(random1.between(3, 8))
    assert.notThat(random1.between(9, 10))
  }

  test "RandomUpTo Fail" {
    assert.throwsException({ 4.randomUpTo("a") } )
  }

  test "RandomUpTo Using Null" {
    assert.throwsException({ 4.randomUpTo(null) } )
  }

  test "Random for real numbers" {
    const random1 = (3.2).randomUpTo(8.9)
    assert.that(random1.between(3.2, 8.9))
    assert.notThat(random1.between(9.0, 10.11))
  }

  test "Integer division" {
    assert.equals(4, 16.div(4))
    assert.equals(4, 18.div(4))
    assert.equals(5, 21.div(4))
    assert.equals(5, (21.2).div(4.1))
    assert.throwsException({ 4.div(null) })
  }

  test "Integer division by zero" {
    assert.throwsException({ 16.div(0) })
    assert.throwsException({ (21.2).div(0.0) })
  }

  test "Integer division fail" {
    assert.throwsException({ 8.div("a") })
  }

  test "Integer division using null" {
    assert.throwsException({ 8.div(null) })
  }

  test "toString" {
    assert.equals("4", 4.toString())
    assert.equals("4.1", (4.1).toString())
  }

  test "modulus" {
    assert.equals(1, 5 % 4)
    assert.equals(1.5, 5.5 % 4)
    assert.equals(0, 4 % 4)
    assert.equals(0, 4.0 % 4)
    assert.equals(0, 4.0 % 1)
  }

  test "modulus using null" {
    assert.throwsException({ 2 % null } )
  }

  test "modulus Fail" {
    assert.throwsException({ 2 % "a" } )
  }

  test "plus one" {
    assert.equals(1, +1)
  }

}