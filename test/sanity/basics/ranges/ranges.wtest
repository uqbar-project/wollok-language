describe "ranges" {

  test "bad ranges should be rejected" {
    assert.throwsException {new Range(start = 10, end = 9, step = 3) }
    assert.throwsException {new Range(start = 10, end = 11, step = -3) }
    assert.throwsException {new Range(start = 2, end = 10, step = -3) }
    assert.throwsException {new Range(start = 10, end = 2, step = 3) }
    assert.throwsException {new Range(start = 1, end = 2, step = 0) }
  }

  test "for each" {
    const range = 0 .. 10
    var sum = 0
    assert.that(range != null)
    range.forEach { i => sum += i }
    assert.equals(55, sum)
  }

  test "fold" {
    const range = 0 .. 10 
    const sum = range.fold(0, { acum, each => acum + each })
    assert.equals(55, sum)
  }

  test "flatMap" {
    const range = 1 .. 4 
    const flatMap = range.flatMap { n => 1 .. n }
    assert.equals([1, 1, 2, 1, 2, 3, 1, 2, 3, 4], flatMap)
  }

  test "sum" {
    var range = 0 .. 9 
    assert.equals(45, range.sum())
  }

  test "sumClosure" {
    var range = 0 .. 9 
    assert.equals(90, range.sum({ n => n * 2 }))
  }

  test "contains" {
    const range = 0 .. 9 
    assert.that(range.contains(9))
    assert.that(range.contains(0))
    assert.that(range.contains(4))
    assert.notThat(range.contains(-1))
    assert.notThat(range.contains(10))
  }

  test "size" {
    assert.equals(11, (0..10).size())
    assert.equals(10, (12..21).size())
    assert.equals(7, (-3..3).size())
    assert.equals(3, new Range(start= 2, end = 10, step = 3).size())
    assert.equals(4, new Range(start= 2, end = 11, step = 3).size())
    assert.equals(3, new Range(start= 10, end = 2, step = -3).size())
    assert.equals(4, new Range(start= 11, end = 2, step = -3).size())
    assert.equals(1, new Range(start= 10, end = 11,step = 3).size())
    assert.equals(1, new Range(start= 10, end = 10,step = 3).size())
    assert.equals(1, new Range(start= 10, end = 9, step = -3).size())
    assert.equals(1, new Range(start= 10, end = 10,step = -3).size())
  }

  test "isEmpty" {
    assert.notThat((0..10).isEmpty())
    assert.notThat((0 .. 0).isEmpty())
  }

  test "any" {
    assert.that((0..10).any({ elem => elem == 5}))
    assert.notThat((0..10).any({ elem => elem == 15}))
  }

  test "all" {
    const range = 0 .. 10 
    assert.notThat(range.all({ elem => elem.even()}))
    assert.that(range.any({ elem => elem < 11}))
  }

  test "map" {
    const range = 0 .. 5
    assert.equals([0, 2, 4, 6, 8, 10], range.map({ elem => elem * 2}))
  }

  test "filter" {
    const range = 0 .. 10
    const evenFiltered = range.filter({ elem => elem.even() })
    assert.equals([0, 2, 4, 6, 8, 10], evenFiltered)
  }

  test "count" {
    const range = 0 .. 9
    const evenCount = range.count({ elem => elem.even() })
    assert.equals(5, evenCount)
  }

  test "anyOne" {
    const range = 0 .. 10
    const anyOne = range.anyOne()
    assert.that(range.contains(anyOne))
  }

  test "anyOne probability" {
    const range = 0 .. 10
    range.step(2)
    const counter = new Dictionary()
    range.forEach({n => counter.put(n,0)})
    500.times({ i =>
      var n = range.anyOne()
      var c = counter.get(n) + 1
      counter.put(n,c)
    })
    range.forEach({n => assert.that(counter.get(n) > 50)})
  }

  test "min" {
    const range = -2 .. 10
    const range2 = 7 .. 3
    assert.equals(-2, range.min())
    assert.equals(3, range2.min())
  }

  test "max" {
    const range = -22 .. -3
    const range2 = 7 .. 3
    assert.equals(-3, range.max())
    assert.equals(7, range2.max())
  }

  test "range for decimals not allowed" {
    const range = new Range(start = 2.4, end = 5.7)
    assert.equals(range.start(), 2)
    assert.equals(range.end(), 5)
    assert.equals(range.step(), 1)
    assert.equals([2, 3, 4, 5], range.asList())
  }

  test "range for strings not allowed" {
    assert.throwsException({ => new Range(start="ABRACADBRA", end="PATA")})
  }

  test "find" {
    const range = 1 .. 9
    const evenFound = range.find({ elem => elem.even() })
    assert.equals(2, evenFound)
  }

  test "findOrValue" {
    const range = 1 .. 9
    const valueNotFound = range.findOrDefault({ elem => elem > 55 }, 22)
    assert.equals(22, valueNotFound)
  }

  test "findOrElse" {
    var encontro = true
    const range = 1 .. 9
    const valueNotFound = range.findOrElse({ elem => elem > 55 }, { encontro = false })
    assert.notThat(encontro)
  }

  test "sorted by" {
    const range = 1 .. 9
    const sortedRange = range.sortedBy({ a, b => a.even() && b.odd() || !(a.odd() && b.even()) && a < b })
    assert.equals([2, 4, 6, 8, 1, 3, 5, 7, 9], sortedRange)
  }

  test "sum step 3" {
    const range = 1 .. 14
    range.step(3)
    assert.equals(35, range.sum())
  }

  test "count step minus 3" {
    const range = 8 .. 1
    range.step(-3)
    assert.equals(2, range.count({ elem => elem.even() }))
  }

  test "filter step minus 3" {
    const range = 8 .. 1
    range.step(-3)
    assert.equals([8,2], range.filter({ elem => elem.even() }))
  }

  test "range for decimals if integers are allowed" {
    const range = new Range(start=2.0, end=5.0)
    assert.equals(5, range.max())
  }

  test "range ending with null should fail" {
    assert.throwsException { => 1..null }
  }

  test "forEach using null should fail" {
    assert.throwsException { => (1..4).forEach(null) }
  }

  test "filter using null should fail" {
    assert.throwsException { => (1..4).filter(null) }
  }

  test "map using null should fail" {
    assert.throwsException { => (1..4).map(null) }
  }

  test "any using null should fail" {
    assert.throwsException { => (1..4).any(null) }
  }

  test "toString with default step, ascending order" {
    assert.equals("1..5", new Range(start = 1, end = 5).toString())
  }

  test "toString with default step, descending order" {
    assert.equals("5..1", new Range(start = 5, end = 1).toString())
  }

  test "toString with non-default step, ascending order" {
    assert.equals("[1, 3, 5]", new Range(start = 1, end = 5, step = 2).toString())
  }

  test "toString with non-default step, descending order" {
    assert.equals("[5, 3, 1]", new Range(start = 5, end = 1, step = -2).toString())
  }

  test "toString with step greater than range, ascending order" {
    assert.equals("[5]", new Range(start = 5, end = 11, step = 10).toString())
  }

  test "toString with step greater than range, descending order" {
    assert.equals("[11]", new Range(start = 11, end = 5, step = -10).toString())
  }

}