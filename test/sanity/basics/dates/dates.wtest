/**
 * Tests for Wollok dates.
 *
 * A Wollok date has no time information, just the day, month & year.
 * It is an immutable object.
 */
describe "Date tests" {

  test "a new date has its attributes correctly initialized" {
    const now = new Date()
    assert.notThat(now.day() === null)
    assert.notThat(now.month() === null)
    assert.notThat(now.year() === null)
  }

  test "a date initialized with named parameters has its attributes correctly set" {
    const now = new Date(day = 1, month = 2, year = 2019)
    assert.equals(now.day(), 1)
    assert.equals(now.month(), 2)
    assert.equals(now.year(), 2019)
  }

  test "two dates are equals because they have no time" {
    const now1 = new Date()
    const now2 = new Date() 
    assert.that(now1.equals(now2))
    assert.that(now1 == now2)
  }

  test "two equal dates can be different object" {
    const now1 = new Date()
    const now2 = new Date() 
    assert.that(now1 == now2)
    assert.that(now1 !== now2)
  }

  test "year 2000 was leap" {
    const year2000 = new Date(day = 4, month = 5, year = 2000)
    assert.that(year2000.isLeapYear())
  }
   
  test "year 2000 was leap with decimals" {
    const year2000 = new Date(day=4, month=5.1, year=2000.7)
    assert.that(year2000.isLeapYear())
  }
   
  test "year 2001 was not leap" {
    const year2001 = new Date(day = 4, month = 5, year = 2001)
    assert.notThat(year2001.isLeapYear())
  }

  test "year 2004 was leap" {
    const year2004 = new Date(day = 4, month = 5, year = 2004)
    assert.that(year2004.isLeapYear())
  }
   
  test "year 2100 is not leap" {
    const year2100 = new Date(day = 4, month = 5, year = 2100)
    assert.notThat(year2100.isLeapYear())
  }

  test "yesterday is less than today" {
    const yesterday = new Date().minusDays(1)
    const today = new Date()
    assert.that(yesterday < today) 
  }

  test "a previous date is less than today" {
    const previous = new Date(day = 10, month = 6, year = 2001)
    const today = new Date()
    assert.that(previous < today) 
  }

  test "today is between yesterday and tomorrow" {
    const yesterday = new Date().minusDays(1)
    const today = new Date()
    const tomorrow = new Date().plusDays(1)
    assert.that(today > yesterday)
    assert.that(today >= yesterday)
    assert.that(today < tomorrow)
    assert.that(today <= tomorrow)
    assert.that(today.between(yesterday, tomorrow)) 
  }

  test "tuesday is second day of week - as enum" {
    const aDay = new Date(day=7, month=6, year=2016)
    assert.equals(aDay.dayOfWeek(), tuesday)
  }

  test "tuesday is second day of week - as number" {
    const aDay = new Date(day=7, month=6, year=2016)
    assert.equals(aDay.internalDayOfWeek(), 2)
  }

  test "difference between dates positive" {
    const day1 = new Date(day=7, month=6, year=2016)
    const day2 = new Date(day=9, month=7, year=2016)
    assert.equals(day2 - day1, 32) 
  }

   
  test "difference between dates negative" {
    const day1 = new Date(day=7, month=6, year=2016)
    const day2 = new Date(day=9, month=7, year=2016)
    assert.equals(day1 - day2, -32) 
  }
   
  test "difference between equal Dates" {
    const day1 = new Date()
    const day2 = new Date()
    assert.equals(day2 - day1, 0) 
  }

  test "add two months" {
    const originalDay = new Date(day=31, month=12, year=2015)
    const finalDay = new Date(day=29, month=2, year=2016)
    const result = originalDay.plusMonths(2)
    assert.that(result.equals(finalDay))
  }

  test "subtract two months" {
    const originalDay = new Date(day=29, month=2, year=2016)
    const finalDay = new Date(day=29, month=12, year=2015)
    const result = originalDay.minusMonths(2)
    assert.that(result.equals(finalDay))
  }

  test "subtract two months passing decimals" {
    const originalDay = new Date(day=29, month=2, year=2016)
    const finalDay = new Date(day=29, month=12, year=2015)
    const result = originalDay.minusMonths(2.4)
    assert.that(result.equals(finalDay))
  }

  test "add one year" {
    const originalDay = new Date(day=29, month=2, year=2016)
    const finalDay = new Date(day=28, month=2, year=2017)
    const result = originalDay.plusYears(1)
    assert.that(result.equals(finalDay))
  }

  test "subtract one year" {
    const originalDay = new Date(day=28, month=2, year=2017)
    const finalDay = new Date(day=28, month=2, year=2016)
    const result = originalDay.minusYears(1)
    assert.that(result.equals(finalDay))
  }

  test "to string with 2 digits month" {
    const aDay = new Date(day=28, month=12, year=2016)
    assert.equals("12/28/2016", aDay.toString())
  }

  test "to string with a 1 digit month" {
    const aDay = new Date(day=28, month=2, year=2016)
    assert.equals("2/28/2016", aDay.toString())
  }

  test "plus days using null should fail" {
    assert.throwsException({ new Date(day=28, month=2, year=2017).plusDays(null) })
  }
   
  test "plus months using null should fail" {
    assert.throwsException({ new Date(day=28, month=2, year=2017).plusMonths(null) })
  }
   
  test "plus years using null should fail" {
    assert.throwsException({ new Date(day=28, month=2, year=2017).plusYears(null) })
  }

  test "difference not using dates should fail" {
    assert.throwsException({ new Date(day=28, month=2, year=2017) - "2" })
  }
   
  test "minus days using null should fail" {
    assert.throwsException({ new Date(day=28, month=2, year=2017).minusDays(null) })
  }

  test "minus months using null should fail" {
    assert.throwsException({ new Date(day=28, month=2, year=2017).minusMonths(null) })
  }

  test "minus years using null should fail" {
    assert.throwsException({ new Date(day=28, month=2, year=2017).minusYears(null) })
  }

  test "between not using dates should fail" {
    assert.throwsException({ new Date(day=28, month=2, year=2017).between(2, 9) })
  }
   
  test "between null should fail" {
    assert.throwsException({ new Date(day=28, month=2, year=2017).between(null, null) })
  }
   
  test "greater than not using dates should fail" {
    assert.throwsException({ new Date(day=28, month=2, year=2017) > 2 })
  }
   
  test "plus days Fail" {
    assert.throwsException( { new Date(day=2, month=2, year=2017).plusDays("a") })
  }

  test "plus months Fail" {
    assert.throwsException( { new Date(day=2, month=2, year=2017).plusMonths("a") })
  }

  test "plus years fail" {
    assert.throwsException( { new Date(day=2, month=2, year=2017).plusYears("a") })
  }

  test "minus days fail" {
    assert.throwsException( { new Date(day=2, month=2, year=2017).minusDays("a") })
  }

  test "minus months fail" {
    assert.throwsException( { new Date(day=2, month=2, year=2017).minusMonths("a") })
  }

  test "minus years fail" {
    assert.throwsException( { new Date(day=2, month=2, year=2017).minusYears("a") })
  }

  test "all operations returning dates are correct wollok dates" {
    assert.that(new Date().minusDays(1).day() !== null)
    assert.that(new Date().minusDays(1).month() !== null)
    assert.that(new Date().minusDays(1).year() !== null)
    assert.that(new Date().plusDays(1).day() !== null)
    assert.that(new Date().plusDays(1).month() !== null)
    assert.that(new Date().plusDays(1).year() !== null)
    assert.that(new Date().minusYears(1).day() !== null)
    assert.that(new Date().minusYears(1).month() !== null)
    assert.that(new Date().minusYears(1).year() !== null)
    assert.that(new Date().plusYears(1).day() !== null)
    assert.that(new Date().plusYears(1).month() !== null)
    assert.that(new Date().plusYears(1).year() !== null)
  }

  test "Monday to Friday are work days" {
    assert.that(new Date(day=13, month=7, year=2020).isWorkDay()) //Monday
    assert.that(new Date(day=14, month=7, year=2020).isWorkDay()) //Tuesday
    assert.that(new Date(day=15, month=7, year=2020).isWorkDay()) //Wednesday
    assert.that(new Date(day=16, month=7, year=2020).isWorkDay()) // Thursday
    assert.that(new Date(day=17, month=7, year=2020).isWorkDay()) //Friday
  }

  test "Saturday and Sunday are weekend days" {
    assert.that(new Date(day=18, month=7, year=2020).isWeekendDay()) //Saturday
    assert.that(new Date(day=19, month=7, year=2020).isWeekendDay()) //Sunday
  }

}
