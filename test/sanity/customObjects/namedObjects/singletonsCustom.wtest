/**
  * Scenario 1: a named object inheriting from a class
  */
class A {
  var property m
}

object o inherits A(m = 5) { }

/**
  * Scenario 2: a named object inheriting from a class using named parameters
  */
class B {
  var property m
}

object o2 inherits B(m = 6) { }

/**
  * Scenario 3: a named object inheriting from a class and linearized with one mixin
  */
mixin M {
  var property value = 5
  method z() = value * 2
}

mixin M2 {
  var z2 = 11
  method z2() = z2
}

object o3 inherits M(value = 4) and B(m = 6){ }

/**
  * Scenario 4: a named object without explicit parent and linearized with several mixins
  */
object o4 inherits M(value = 3) and M2 { }

/**
  * Scenario 5: a named object inheriting from a class and linearized with several mixins
  */
object o5 inherits M(value = 5) and M2(z2 = 15) and B(m = 6) { }

describe "singletons - customs named object, classes and mixins" {

  test "objects that inherits from a class" {
    assert.equals(5, o.m())
  }

  test "object that inherit from a class with explicit builders" {
    assert.equals(6, o2.m())
  }

  test "object that inherit from a class and have a mixin" {
    assert.equals(6, o3.m())
    assert.equals(8, o3.z())
  }

  test "object that have multiple mixins" {
    assert.equals(11, o4.z2())
    assert.equals(6, o4.z())
  }

  test "object that inherits from a class and have multiple mixins" {
    assert.equals(6, o5.m())
    assert.equals(15, o5.z2())
    assert.equals(10, o5.z())
  }

}
