import asustadores.*

import modelo.Puerta
import modelo.Equipo
import modelo.monstersInc

import asustables.Ninio
import asustables.Piyamada
import asustables.Adolescente

import asistentes.*
import actividades.*

/**
  * Helper for test initialization
  */
object monstersFactory {
  method getMike() {
    const mike = new AsustadorPerseverante(edad = 0)
    mike.mejora(new EstudiarMateria(materia = "Sustos 2", puntos = 50))
    mike.mejora(new EjercitarEnSimulador(horas = 2))
    return mike
  }

  method getSullivan() = new AsustadorNato(edad = 25, puntosTerrorInnatos = 200)

  method getEquipoSully(asustador) {
    const equipo = new Equipo(asustador = asustador, asistente = new AsistenteNormal())
    equipo.visitar(new Puerta(contenido = new Adolescente()))
    return equipo
  }

  method getMonstersInc(equipo) {
    const empresa = monstersInc
    // simulamos un día laboral de monsters inc
    empresa.agregarEquipo(equipo)
    empresa.agregarPuerta(new Puerta(contenido = new Ninio(edad = 4)))
    empresa.diaLaboral()
    return empresa
  }
}

object asistenteFactory {
  method getPiyamada() {
    const piyamada = new Piyamada()
    piyamada.agregarNinio(new Ninio(edad = 2))
    piyamada.agregarNinio(new Ninio(edad = 3))
    piyamada.agregarNinio(new Ninio(edad = 4))
    return piyamada
  }
}

/**
  * Tests
  */
describe "puntos iniciales" {

  test "Asustador Nato con Ninio genera energia" {
    const sullivan = monstersFactory.getSullivan()
    const puertaConNinio4 = new Puerta(contenido = new Ninio(edad = 4))
    assert.equals(1250, sullivan.entrarAPuerta(puertaConNinio4))
  }

  test "Asustador Perseverante mejora estudiando y ejercitando" {
    const mike = monstersFactory.getMike()
    assert.equals(70, mike.puntosDeTerror())
  }

  test "Mike asusta una piyamada" {
    const piyamada = asistenteFactory.getPiyamada()
    const puertaConPiyamada = new Puerta(contenido = piyamada)
  
    const mike = monstersFactory.getMike()
    const energiaMike = mike.entrarAPuerta(puertaConPiyamada)
  
    assert.equals(75.83333, energiaMike)   // 70/2 + 70/3 + 70/4 = 75
  }

}

describe "puntos finales" {

  const mike = monstersFactory.getMike()
  const puertaConNinio4 = new Puerta(contenido = new Ninio(edad = 4))
  const sullivan = monstersFactory.getSullivan()
  const equipo = monstersFactory.getEquipoSully(sullivan)
  const monstersInc = monstersFactory.getMonstersInc(equipo)

  test "asustar a un adolescente disminuye la motivacion" {
    assert.equals(90.0, sullivan.nivelMotivacion())
  }

  test "energia laboral de monstersInc después de un día laboral" {
    assert.equals(1125.0, equipo.energiaGenerada())
  }

  test "el equipo más asustador es el que conforma sully" {
    assert.equals(equipo, monstersInc.equipoMasAsustador())
  }
  
  test "si agregamos otro equipo que genera más energía desplaza a sully como el equipo más asustador" {
    const equipoCapo = object {
      method energiaGenerada() = 90000.0
    }
    monstersInc.agregarEquipo(equipoCapo)
  
    assert.equals(equipoCapo, monstersInc.equipoMasAsustador())
  }

  test "energia total generada sube el segundo día" {
    assert.equals(1125.0, monstersInc.energiaTotalGenerada())
    monstersInc.diaLaboral()
    assert.equals(2250.0, monstersInc.energiaTotalGenerada())
  }

  test "total de energía generada para un asistente normal" {
    equipo.asistente(new AsistenteNormal())
    equipo.nuevoDia()
    equipo.visitar(puertaConNinio4)
    assert.equals(1125.0, equipo.energiaGenerada())
  }

  test "total de energía generada para un asistente ineficiente" {
    equipo.asistente(new AsistenteIneficiente(reduce = 100))
    equipo.nuevoDia()
    equipo.visitar(puertaConNinio4)
    assert.equals(1025.0, equipo.energiaGenerada())
  }

  test "total de energía generada para un asistente supereficiente" {
    equipo.asistente(new AsistenteSupereficiente(factor = 1.25))
    equipo.nuevoDia()
    equipo.visitar(puertaConNinio4)
    assert.equals(2531.25, equipo.energiaGenerada())
  }

}
